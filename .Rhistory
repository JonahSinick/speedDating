print('startingSums')
df = makeRatingSums(df, ratings)
print('startingAvgs')
df = makeAvgs(df, ratings)
print('addComb')
df = addCombs(df)
return(df)
}
men = df[df["gender"] == 1,]
slice = men[men["wave"] == 4,]
slice = makeRatingMetrics(slice)
names = c( "attrRating", "likeRating", "decRateeAvg", "likeRateeAvg", "attrRateeAvg","combRatingInc" , "combRatingExc" "combRatingIncGuess", "combRatingExcGuess", "combRateeAvg")
names = c( "attrRating", "likeRating", "decRateeAvg", "likeRateeAvg", "attrRateeAvg","combRatingInc" , "combRatingExc", "combRatingIncGuess", "combRatingExcGuess", "combRateeAvg")
names = c( "attrRating", "likeRating", "decRateeAvg", "likeRateeAvg", "attrRateeAvg", "combRateeAvg", "combRatingInc" , "combRatingExc", "combRatingIncGuess", "combRatingExcGuess", "combRateeAvg")
targets = c("decRating", "combRatingInc", "combRatingExc")
niceCors(slice, names, targets)
names = c( "attrRating", "likeRating", "decRateeAvg", "likeRateeAvg", "attrRateeAvg", "combRateeAvg", "combRatingInc" , "combRatingExc", "combRatingIncGuess", "combRatingExcGuess")
targets = c("decRating", "combRatingInc", "combRatingExc")
niceCors(slice, names, targets)
men = df[df["gender"] == 1,]
women = df[df["gender"] == 0,]
men = makeRatingMetrics(men)
write.csv(men , '~/Desktop/speedDating/ratingMetricsAddedMen.csv')
women = makeRatingMetrics(women)
write.csv(women , '~/Desktop/speedDating/ratingMetricsAddedWomen.csv')
men = men[, !(names(men) %in% c("gender", "X"))]
women = women[, !(names(women) %in% c("gender", "X"))]
men = men[-1:0]
women = women[-1:0]
colnames(men)= gsub("$", "M", names(men))
colnames(women) = gsub("$", "W", names(women))
x_merges = c("iidW", "idW", "waveW", "partnerW", "pidW", "matchW", "sameRaceW")
y_merges = c("pidM", "partnerM", "waveM", "idM", "iidM", "matchM", "sameRaceM")
merged = merge(women, men, by.x = x_merges, by.y = y_merges)
colnames(merged)[c(1,2,3,4,5,6,7)] = c("iidW", "idW", "wave", "idM", "iidM", "match", "sameRace")
mean(merged[["combRateeAvgM"]])
mean(merged[["combRateeAvgW"]])
n = names(merged)
features = n[grep("imprace|imprelig|happy|expnum|Pref|date$|goOut$|RaterAvgM$|RaterAvgW$|RateeAvgW$|RateeAvgM$",n)]
featuresW = features[grep("W$", features)]
featuresM = features[grep("M$", features)]
niceCors(merged, featuresM, "decRatingM")
niceCors(merged, featuresW, "decRatingW")
colNamesDiffs =  gsub("M", "HighWLowMDiff" ,featuresM)
colNamesAbsDiffs =  gsub("M", "AbsDiff" ,featuresM)
for(i in 1:length(featuresW)){
merged[colNamesDiffs[i]] = merged[featuresW[i]] - merged[featuresM[i]]
merged[colNamesAbsDiffs[i]] = abs(merged[featuresW[i]] - merged[featuresM[i]])
}
n = names(merged)
combs = n[grep("comb",n)]
diffs = n[grep("Diff", n)]
niceCors(merged, diffs, c("decRatingM", "decRatingW"))
write.csv(merged , '~/Desktop/speedDating/ratingMetricsAdded.csv')
source("libraries.R")
merged = read.csv('~/Desktop/speedDating/ratingMetricsAdded.csv')
binaries = n[grep("career|goOut|field|date|goal|race", n)]
menBinaries = binaries[grep("M$", binaries)][-8:0]
womenBinaries = binaries[grep("W$", binaries)][-8:0]
createCrosses = function(df,menBinaries,womenBinaries, codeWords){
for(codeWord in codeWords){
mens = menBinaries[grep(codeWord,menBinaries)]
womens = womenBinaries[grep(codeWord,womenBinaries)]
for(m in mens){
for(w in womens){
newName = paste(paste(m,w,sep=""),"Cross",sep="")
df[newName] = 0
df[df[w] == 1 & df[m] == 1,newName] = 1
}
}
}
return(df)
}
merged = createCrosses(merged,menBinaries,womenBinaries, c("field","goOut","race", "career", "date", "goal"))
n = names(merged)
crosses= n[grep("Cross",n)]
badCrosses = crosses[colSums(merged[crosses]) < 100]
merged = merged[!(n %in% badCrosses)]
write.csv(merged , '~/Desktop/speedDating/binaryCrossesHandled.csv')
merged = read.csv('~/Desktop/speedDating/binaryCrossesHandled.csv')
n = names(merged)
features = n[grep("Diff|Cross|comb|dec",n)]
features
features = features[-(c(1:4,10:13))]
features
cor(features, c("decRatingM", "decRatingW"))
niceCors(merged, features, c("decRatingM", "decRatingW"))
features = n[grep("Diff|Cross|comb|dec",n)]
features = features[-(c(1:4,10:13))]
features
n = names(merged)
features = n[grep("Diff|Cross|comb|decRaterAvg|decRateeAvg",n)]
features
niceCors(merged, features, c("decM", "decW"))
features = n[grep("Diff|Cross|combRateeAvg|combRatingIncGuess|combRatingExcGuess|decRaterAvg|decRateeAvg",n)]
features
niceCors(merged, features, c("decM", "decW"))
prefFeatures = n[grep("Pref",n)]
niceCors(merged, prefFeatures, c("decM", "decW"))
prefFeatures = n[grep("attrPref",n)]
niceCors(merged, prefFeatures, c("decM", "decW"))
prefFeatures = n[grep("intelPref",n)]
niceCors(merged, prefFeatures, c("decM", "decW"))
prefFeatures = n[grep("funPref",n)]
niceCors(merged, prefFeatures, c("decM", "decW"))
prefFeatures = n[grep("ambPref",n)]
niceCors(merged, prefFeatures, c("decM", "decW"))
prefFeatures = n[grep("sincPref",n)]
niceCors(merged, prefFeatures, c("decM", "decW"))
prefFeatures = n[grep("sharPref",n)]
niceCors(merged, prefFeatures, c("decM", "decW"))
niceCors(merged, prefFeatures, c("decM", "decW"))
diffFeatures = n[grep("Diff",n)]
niceCors(merged, diffFeatures, c("decM", "decW"))
diffFeatures = n[grep("amb",n)]
niceCors(merged, diffFeatures, c("decM", "decW"))
diffFeatures = n[grep("intel",n)]
niceCors(merged, diffFeatures, c("decM", "decW"))
niceCors(merged, diffFeatures, c("decRateeAvgM", "decRateeAvgW"))
niceCors(merged, diffFeatures, c("decM", "decW"))
diffFeatures = n[grep("attr",n)]
niceCors(merged, diffFeatures, c("decM", "decW"))
diffFeatures = n[grep("comb",n)]
niceCors(merged, diffFeatures, c("decM", "decW"))
diffFeatures = features[grep("comb",features)]
niceCors(merged, diffFeatures, c("decM", "decW"))
possibilities
oks = c()
for(key in keys(womenHash)){
print(key)
print(womenHash[[key]][1:10])
oks = c(oks, names(womenHash[[key]]))
}
possibilities = unique(oks[table(oks)  > 8])
possiblities
possibilities
newOKs = unique(names(oks))
length(unique(names(oks[table(oks) > 8])))
oks
for(key in keys(womenHash)){
print(key)
print(womenHash[[key]][1:10])
oks = c(oks, names(womenHash[[key]]))
}
for(key in keys(womenHash)){
print(key)
print(womenHash[[key]][1:10])
oks = c(oks, names(womenHash[[key]]))
}
source("libraries.R")
source("machineLearning2.R")
merged = read.csv('~/Desktop/speedDating/binaryCrossesHandled.csv')
n = names(merged)
features = n[grep("Diff|Cross|combRateeAvg|combRatingIncGuess|combRatingExcGuess|decRaterAvg|decRateeAvg",n)]
prefFeatures = n[grep("sharPref",n)]
diffFeatures = features[grep("comb",features)]
for(wave in waves[1]){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featuresSelector(train, test, wBase, features, "decRatingW", 0.5, 5, 1)
}
source("libraries.R")
source("machineLearning2.R")
merged = read.csv('~/Desktop/speedDating/binaryCrossesHandled.csv')
n = names(merged)
features = n[grep("Diff|Cross|combRateeAvg|combRatingIncGuess|combRatingExcGuess|decRaterAvg|decRateeAvg",n)]
prefFeatures = n[grep("sharPref",n)]
diffFeatures = features[grep("comb",features)]
womenHash = hash()
wBase = c("decRaterAvgW")
features
wBase = c("decRaterAvgW")
waves =unique(merged[["wave"]])
for(wave in waves[1]){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featuresSelector(train, test, wBase, features, "decRatingW", 0.5, 5, 1)
}
source("libraries.R")
source("machineLearning2.R")
merged = read.csv('~/Desktop/speedDating/binaryCrossesHandled.csv')
n = names(merged)
features = n[grep("Diff|Cross|combRateeAvg|combRatingIncGuess|combRatingExcGuess|decRaterAvg|decRateeAvg",n)]
prefFeatures = n[grep("sharPref",n)]
diffFeatures = features[grep("comb",features)]
womenHash = hash()
wBase = c("decRaterAvgW", "combRateeAvgW", "combWHighMLowDiff")
waves =unique(merged[["wave"]])
for(wave in waves[1]){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featuresSelector(train, test, wBase, features, "decRatingW", 0.5, 10, thres= 0 )
}
waves =unique(merged[["wave"]])
for(wave in waves[1]){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, wBase, features, "decRatingW", 0.5, 10, thres= 0 )
}
merged[features]
train[features]
test[features]
for(wave in waves[1]){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, wBase, features, "decRatingW", 0.5, 10)
}
featureSelector = function(train, test, base, tries, tar, fracTrain, numTimes, thres){
totalLogLoss = 0
scores = hash()
for(feature in tries){
scores[[feature]] = 0
}
for(i in 1:numTimes){
set.seed = i; idxs =  sample(1:nrow(train))
startIdx = 1
midIdx = floor(nrow(train)*fracTrain)
trainIdxs = idxs[startIdx:midIdx]
trainTemp = train[trainIdxs,]
baseLogLoss = logLoss(test[[tar]], getProbs(trainTemp, test, base,tar))
totalLogLoss = baseLogLoss + totalLogLoss
for(feature in tries){
tempFeatures = c(base,feature)
newLogLoss = logLoss(test[[tar]], getProbs(train, test, tempFeatures,tar))
scores[[feature]] = scores[[feature]] + baseLogLoss - newLogLoss
}
}
for(feature in tries){
scores[[feature]] = (scores[[feature]]/numTimes)
}
scores = values(scores)
sorted = round(10000*sort(scores, decreasing= TRUE))
sorted = sorted[sorted >= thres]
baseLogLoss = round(10000*baseLogLoss)
bestFeature = names(sorted[1])
print(sorted)
cat("Original LogLoss: ", baseLogLoss, " Best Log Loss ", baseLogLoss - sorted[1], " Best feature: ", bestFeature, "\n", sep="")
currentFeatures = c(base, bestFeature)
cat("currentFeatures:", "\n", sep="")
for(c in currentFeatures){
cat(c, "\n", sep="")
}
return(sorted)
}
for(wave in waves[1]){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, wBase, features, "decRatingW", 0.5, 10)
}
featureSelector = function(train, test, base, tries, tar, fracTrain, numTimes, thres){
print(tries)
totalLogLoss = 0
scores = hash()
for(feature in tries){
scores[[feature]] = 0
}
for(i in 1:numTimes){
set.seed = i; idxs =  sample(1:nrow(train))
startIdx = 1
midIdx = floor(nrow(train)*fracTrain)
trainIdxs = idxs[startIdx:midIdx]
trainTemp = train[trainIdxs,]
baseLogLoss = logLoss(test[[tar]], getProbs(trainTemp, test, base,tar))
totalLogLoss = baseLogLoss + totalLogLoss
for(feature in tries){
tempFeatures = c(base,feature)
newLogLoss = logLoss(test[[tar]], getProbs(train, test, tempFeatures,tar))
scores[[feature]] = scores[[feature]] + baseLogLoss - newLogLoss
}
}
for(feature in tries){
scores[[feature]] = (scores[[feature]]/numTimes)
}
scores = values(scores)
sorted = round(10000*sort(scores, decreasing= TRUE))
sorted = sorted[sorted >= thres]
baseLogLoss = round(10000*baseLogLoss)
bestFeature = names(sorted[1])
print(sorted)
cat("Original LogLoss: ", baseLogLoss, " Best Log Loss ", baseLogLoss - sorted[1], " Best feature: ", bestFeature, "\n", sep="")
currentFeatures = c(base, bestFeature)
cat("currentFeatures:", "\n", sep="")
for(c in currentFeatures){
cat(c, "\n", sep="")
}
return(sorted)
}
for(wave in waves[1]){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, wBase, features, "decRatingW", 0.5, 10)
}
source("libraries.R")
source("machineLearning2.R")
merged = read.csv('~/Desktop/speedDating/binaryCrossesHandled.csv')
n = names(merged)
features = n[grep("Diff|Cross|combRateeAvg|combRatingIncGuess|combRatingExcGuess|decRaterAvg|decRateeAvg",n)]
features
wBase = c("decRaterAvgW", "combRateeAvgW", "combRateeAvgWHighMLowDiff")
waves = unique(merged[["wave"]])
for(wave in waves){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, wBase, features, "decRatingW", 0.5, 10)
}
merged[wBase]
merged[wBase[1]]
merged[wBase[2]]
merged[wBase[3]]
wBase = c("decRaterAvgW", "combRateeAvgW")
waves = unique(merged[["wave"]])
for(wave in waves){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, wBase, features, "decRatingW", 0.5, 10)
}
for(wave in waves){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, wBase, features[1], "decRatingW", 0.5, 10)
}
for(wave in waves){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, wBase[1], features[1], "decRatingW", 0.5, 10)
}
features[1]
for(wave in waves){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, wBase[1], features[3], "decRatingW", 0.5, 10)
}
featureSelector = function(train, test, base, tries, tar, fracTrain, numTimes, thres){
totalLogLoss = 0
scores = hash()
for(feature in tries){
scores[[feature]] = 0
}
for(i in 1:numTimes){
set.seed = i; idxs =  sample(1:nrow(train))
startIdx = 1
midIdx = floor(nrow(train)*fracTrain)
trainIdxs = idxs[startIdx:midIdx]
trainTemp = train[trainIdxs,]
baseLogLoss = logLoss(test[[tar]], getProbs(trainTemp, test, base,tar))
totalLogLoss = baseLogLoss + totalLogLoss
for(feature in tries){
tempFeatures = c(base,feature)
newLogLoss = logLoss(test[[tar]], getProbs(train, test, tempFeatures,tar))
scores[[feature]] = scores[[feature]] + baseLogLoss - newLogLoss
}
}
for(feature in tries){
scores[[feature]] = (scores[[feature]]/numTimes)
}
scores = values(scores)
sorted = round(10000*sort(scores, decreasing= TRUE))
sorted = sorted[sorted >= thres]
baseLogLoss = round(10000*baseLogLoss)
bestFeature = names(sorted[1])
print(sorted)
cat("Original LogLoss: ", baseLogLoss, " Best Log Loss ", baseLogLoss - sorted[1], " Best feature: ", bestFeature, "\n", sep="")
currentFeatures = c(base, bestFeature)
cat("currentFeatures:", "\n", sep="")
for(c in currentFeatures){
cat(c, "\n", sep="")
}
return(sorted)
}
featureSelector = function(train, test, base, tries, tar, fracTrain, numTimes, thres = 0){
totalLogLoss = 0
scores = hash()
for(feature in tries){
scores[[feature]] = 0
}
for(i in 1:numTimes){
set.seed = i; idxs =  sample(1:nrow(train))
startIdx = 1
midIdx = floor(nrow(train)*fracTrain)
trainIdxs = idxs[startIdx:midIdx]
trainTemp = train[trainIdxs,]
baseLogLoss = logLoss(test[[tar]], getProbs(trainTemp, test, base,tar))
totalLogLoss = baseLogLoss + totalLogLoss
for(feature in tries){
tempFeatures = c(base,feature)
newLogLoss = logLoss(test[[tar]], getProbs(train, test, tempFeatures,tar))
scores[[feature]] = scores[[feature]] + baseLogLoss - newLogLoss
}
}
for(feature in tries){
scores[[feature]] = (scores[[feature]]/numTimes)
}
scores = values(scores)
sorted = round(10000*sort(scores, decreasing= TRUE))
sorted = sorted[sorted >= thres]
baseLogLoss = round(10000*baseLogLoss)
bestFeature = names(sorted[1])
print(sorted)
cat("Original LogLoss: ", baseLogLoss, " Best Log Loss ", baseLogLoss - sorted[1], " Best feature: ", bestFeature, "\n", sep="")
currentFeatures = c(base, bestFeature)
cat("currentFeatures:", "\n", sep="")
for(c in currentFeatures){
cat(c, "\n", sep="")
}
return(sorted)
}
for(wave in waves){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, wBase[1], features[3], "decRatingW", 0.5, 10)
}
source("libraries.R")
getProbs = function(train, test, features, tar){
s=scale(train[features],center=TRUE,scale=TRUE)
co = c(heuristicC(s))
m=LiblineaR(data=s,labels=factor(train[,tar]),type=0,cost=co,bias=TRUE,verbose=FALSE)
s2= scale(test[features],attr(s,"scaled:center"),attr(s,"scaled:scale"))
p=predict(m,s2,prob=TRUE)
probs = p$probabilities[,"1"]
return(probs)
}
featuresSelector = function(train, test, currentFeatures, remainingFeatures, tar, fracTrain, numTimes, numRequested){
h = hash()
origLen = length(currentFeatures)
for(i in 1:numRequested){
cat("Length of current features: ", length(currentFeatures), " Length of remaining features: ", length(remainingFeatures), "\n",sep="")
scores = names(featureSelector(train, test, currentFeatures, remainingFeatures, tar, fracTrain, numTimes))
if(length(scores) > 1 &  length(currentFeatures) < (numRequested + length(origLen))){
remainingFeatures = names(scores)[scores >=5]
currentFeatures[length(currentFeatures) + 1] = remainingFeatures[1]
remainingFeatures = remainingFeatures[-1:0]
h[["currentFeatures"]] = currentFeatures
h[["remainingFeatures"]] = remainingFeatures
}
else{
h[["remainingFeatures"]] = NA
}
}
return(h)
}
featureSelector = function(train, test, base, tries, tar, fracTrain, numTimes, thres = 0){
totalLogLoss = 0
scores = hash()
for(feature in tries){
scores[[feature]] = 0
}
for(i in 1:numTimes){
set.seed = i; idxs =  sample(1:nrow(train))
startIdx = 1
midIdx = floor(nrow(train)*fracTrain)
trainIdxs = idxs[startIdx:midIdx]
trainTemp = train[trainIdxs,]
baseLogLoss = logLoss(test[[tar]], getProbs(trainTemp, test, base,tar))
totalLogLoss = baseLogLoss + totalLogLoss
for(feature in tries){
tempFeatures = c(base,feature)
newLogLoss = logLoss(test[[tar]], getProbs(train, test, tempFeatures,tar))
scores[[feature]] = scores[[feature]] + baseLogLoss - newLogLoss
}
}
for(feature in tries){
scores[[feature]] = (scores[[feature]]/numTimes)
}
scores = values(scores)
sorted = round(10000*sort(scores, decreasing= TRUE))
sorted = sorted[sorted >= thres]
baseLogLoss = round(10000*baseLogLoss)
bestFeature = names(sorted[1])
print(sorted)
cat("Original LogLoss: ", baseLogLoss, " Best Log Loss ", baseLogLoss - sorted[1], " Best feature: ", bestFeature, "\n", sep="")
currentFeatures = c(base, bestFeature)
cat("currentFeatures:", "\n", sep="")
for(c in currentFeatures){
cat(c, "\n", sep="")
}
return(sorted)
}
source("libraries.R")
source("machineLearning2.R")
merged = read.csv('~/Desktop/speedDating/binaryCrossesHandled.csv')
n = names(merged)
features = n[grep("Diff|Cross|combRateeAvg|combRatingIncGuess|combRatingExcGuess|decRaterAvg|decRateeAvg",n)]
prefFeatures = n[grep("sharPref",n)]
diffFeatures = features[grep("comb",features)]
womenHash = hash()
wBase = c("decRaterAvgW", "combRateeAvgW")
waves = unique(merged[["wave"]])
for(wave in waves){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, wBase[1], features[3], "decRatingW", 0.5, 10)
}
for(wave in waves){
print(c(wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, wBase[2], features[3], "decRatingW", 0.5, 10)
}
