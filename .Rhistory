tempFeatures = c("decRaterAvgW", "decRateeAvgW",
"decRaterAvgAdjW", "decRateeAvgAdjW",
"decRatingGuessW", "decRatingGuessAdjW",
"attrRateeAvgW", "attrRateeAvgAdjW", "attrRatingGuessW", "attrRatingGuessAdjW",
"likeRateeAvgW", "likeRateeAvgAdjW", "likeRatingGuessW", "likeRatingGuessAdjW",
"sharRateeAvgW", "sharRateeAvgAdjW", "sharRatingGuessW", "sharRatingGuessAdjW",
"funRateeAvgW", "funRateeAvgAdjW", "funRatingGuessW", "funRatingGuessAdjW",
"attrRateeAvgAdjHighWLowMDiff", "likeRateeAvgAdjHighWLowMDiff", "funRateeAvgAdjHighWLowMDiff", "sharRateeAvgAdjHighWLowMDiff",
"sharRateeAvgAdjW","likeRateeAvgAdjW", "decRateeAvgHighWLowMDiff",
"decRateeAvgAdjHighWLowMDiff",  "decRaterAvgAdjHighWLowMDiff",
"decRatingGuessHighWLowMDiff")
womenBase = c("goOutM")
# womenBase = c( "decRaterAvgHighWLowMDiff", "goalfunNightMgoalMeetNewWCross")
for(wave in waves){
print(c(i,wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, womenBase, tempFeatures, "decRatingW", 0.5, 10, thres= 0 )
}
womenHash
oks = c()
for(key in keys(womenHash)){
print(key)
print(womenHash[[key]][1:4])
}
oks = c()
for(key in keys(womenHash)){
print(key)
print(womenHash[[key]][1:4])
}
unique(oks)
oks = c()
for(key in keys(womenHash)){
print(key)
print(womenHash[[key]][1:4])
oks = c(oks, womenHash[[key]])
}
oks
unique(names(oks))
newOKs = unique(names(oks))
length(tempFeatures)
womenBase = c("decRaterAvgW")
# womenBase = c( "decRaterAvgHighWLowMDiff", "goalfunNightMgoalMeetNewWCross")
for(wave in waves){
print(c(i,wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, womenBase, tempFeatures, "decRatingW", 0.5, 10, thres= 0 )
}
womenBase = c("decRaterAvgW", "decRateeAvgW")
oks = c()
for(key in keys(womenHash)){
print(key)
print(womenHash[[key]][1:4])
oks = c(oks, womenHash[[key]])
}
newOKs = unique(names(oks))
newOks
newOKs
womenBase = c("goOutM")
for(wave in waves){
print(c(i,wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, c("goOutM"), c("decRaterAvgW", "decRateeAvgW", "decRatingGuessW"), "decRatingW", 0.5, 10, thres= 0 )
}
oks = c()
for(key in keys(womenHash)){
print(key)
print(womenHash[[key]][1:3])
oks = c(oks, womenHash[[key]])
}
womenBase = c("goOutM")
for(wave in waves){
print(c(i,wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, c("goOutM"), c("decRaterAvgW", "decRateeAvgW", "decRatingGuessW"), "decRatingW", 0.5, 10, thres= -50 )
}
slice = merged[merged["wave"] == 12,]
cor(slice, slice["decRatingW"])
round(100*cor(slice, slice["decRatingW"]))
round(100*cor(slice, slice["decRatingW"]))
nrow(slice)
mean(slice[["decRatingW"]])
mean(slice[["decRatingGuessW"]])
mean(slice[["decRaterAvgW"]])
mean(slice[["decRateeAvgW"]])
slice[["decWaveAvgW"]]
slice = merged[merged["wave"] == 2,]
slice[["decWaveAvgW"]]
slice[["attrWaveAvgW"]]
table([["attrWaveAvgW"]])
table(slice[["attrWaveAvgW"]])
table(10*slice[["attrWaveAvgW"]])
table(round(10*slice[["attrWaveAvgW"]]))
table(round(10*slice[["attrRaterAvgW"]]))
table(round(10*slice[["decRaterAvgW"]]))
table(round(10*slice[["decRateeAvgW"]]))
table(round(10*slice[["decRatingGuessW"]]))
round(100*cor(slice, slice["decRatingW"]))
slice = merged[merged["wave"] == 12,]
round(100*cor(slice, slice["decRatingW"]))
slice["decRatingGuessW"]
slice["decRatingGuessM"]
cor(slice["decRatingGuessW"], slice["decRatingW"])
cor(slice["decRatingGuessM"], slice["decRatingM"])
cor(slice[c("decRaterAvgW", "decRateeAvgW", "decRatingGuessW"], slice["decRatingM"])
cor(slice[c("decRaterAvgW", "decRateeAvgW", "decRatingGuessW")], slice["decRatingM"])
cor(slice[c("decRaterAvgW", "decRateeAvgW", "decRatingGuessW")], slice["decRatingW"])
slice = merged[merged["wave"] == 4,]
table(round(10*slice[["decRatingGuessW"]]))
cor(slice[c("decRaterAvgW", "decRateeAvgW", "decRatingGuessW")], slice["decRatingW"])
slice = merged[merged["wave"] == q,]
slice = merged[merged["wave"] == 2,]
cor(slice[c("decRaterAvgW", "decRateeAvgW", "decRatingGuessW")], slice["decRatingW"])
oks = c()
for(key in keys(womenHash)){
print(key)
print(womenHash[[key]][1:3])
oks = c(oks, womenHash[[key]])
}
womenBase = c("decRaterAvgW", "decRateeAvgW")
tempFeatures = c("decRaterAvgW", "decRateeAvgW",
"decRaterAvgAdjW", "decRateeAvgAdjW",
"decRatingGuessW", "decRatingGuessAdjW",
"attrRateeAvgW", "attrRateeAvgAdjW", "attrRatingGuessW", "attrRatingGuessAdjW",
"likeRateeAvgW", "likeRateeAvgAdjW", "likeRatingGuessW", "likeRatingGuessAdjW",
"sharRateeAvgW", "sharRateeAvgAdjW", "sharRatingGuessW", "sharRatingGuessAdjW",
"funRateeAvgW", "funRateeAvgAdjW", "funRatingGuessW", "funRatingGuessAdjW",
"attrRateeAvgAdjHighWLowMDiff", "likeRateeAvgAdjHighWLowMDiff", "funRateeAvgAdjHighWLowMDiff", "sharRateeAvgAdjHighWLowMDiff",
"sharRateeAvgAdjW","likeRateeAvgAdjW", "decRateeAvgHighWLowMDiff",
"decRateeAvgAdjHighWLowMDiff",  "decRaterAvgAdjHighWLowMDiff",
"decRatingGuessHighWLowMDiff")
womenBase = c("decRaterAvgW", "decRateeAvgW")
# womenBase = c( "decRaterAvgHighWLowMDiff", "goalfunNightMgoalMeetNewWCross")
for(wave in waves){
print(c(i,wave))
train = merged[merged["wave"] != wave,]
test = merged[merged["wave"] == wave,]
womenHash[[toString(wave)]]  = featureSelector(train, test, womenBase, tempFeatures, "decRatingW", 0.5, 10, thres= 0 )
}
source("libraries.R")
niceCors(merged, c("decRatingM"), c("decRatingM"))
waves = unique(merged[["wave"]])
for(w in waves[1]){
niceCors(merged[merged[w] == w,][tempFeatures], c("decRatingW") )
}
waves = unique(merged[["wave"]])
for(w in waves[1]){
niceCors(merged[merged["wave"] == w,][tempFeatures], c("decRatingW") )
}
for(w in waves[1]){
niceCors(merged[merged["wave"] == w,], tempFeatures, c("decRatingW") )
}
for(w in waves[1]){
print(niceCors(merged[merged["wave"] == w,], tempFeatures, c("decRatingW") ))
}
for(w in waves[1]){
print(niceCors(merged[merged["wave"] == w,], c("decAvgRatingW") , c("attrAvgRatingW", "likeAvgRatingW", "funAvgRatingW")))
}
for(w in waves[1]){
print(niceCors(merged[merged["wave"] == w,], c("decAvgRatingW") , c("attrRaterAvgW", "likeRaterAvgW", "funRaterAvgW")))
}
for(w in waves[1]){
print(niceCors(merged[merged["wave"] == w,], c("decRateeAvgW") , c("attrRateeAvgW", "likeRateeAvgW", "funRateeAvgW")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRateeAvgW") , c("attrRateeAvgW", "likeRateeAvgW", "funRateeAvgW")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW","decRateeAvgW") , c("attrRateeAvgW", "likeRateeAvgW", "funRateeAvgW")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW","decRateeAvgW") , c("decRateeAvgW","attrRateeAvgW", "likeRateeAvgW", "funRateeAvgW")))
}
merged["combRateeAvgW"] = colSums(merged[c("decRateeAvgW", "attrRateeAvgW", "likeRateeAvgW")]
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW") , c("decRateeAvgW","attrRateeAvgW", "likeRateeAvgW", "funRateeAvgW", "combRateeAvgW")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW") , c("decRateeAvgW","attrRateeAvgW", "likeRateeAvgW", "funRateeAvgW", "combRateeAvgW"))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW") , c("decRateeAvgW","attrRateeAvgW", "likeRateeAvgW", "funRateeAvgW", "combRateeAvgW"))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW","decRateeAvgW") , c("decRateeAvgW","attrRateeAvgW", "likeRateeAvgW", "funRateeAvgW")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW") , c("decRateeAvgW","
attrRateeAvgW",
"likeRateeAvgW",
"funRateeAvgW",
"combRateeAvgW")))
}
merged["combRateeAvgW"] = colSums(merged[c("decRateeAvgW", "attrRateeAvgW", "likeRateeAvgW")]
)
merged["combRateeAvgW"] = rowSums(merged[c("decRateeAvgW", "attrRateeAvgW", "likeRateeAvgW")]
niceCors(merged, "decRatingW", c("decRateeAvgW", "attrRateeAvgW", "likeRateeAvgW", "combRateeAvgW"))
niceCors(merged, c("decRatingW"), c("decRateeAvgW", "attrRateeAvgW", "likeRateeAvgW", "combRateeAvgW"))
niceCors(merged, c("decRatingW"), c("combRateeAvgW"))
merged["combRateeAvgW"] = rowSums(merged[c("decRateeAvgW", "attrRateeAvgW", "likeRateeAvgW")]
)
niceCors(merged, c("decRatingW"), c("combRateeAvgW"))
niceCors(merged, c("decRatingW"), c("attrRateeAvgW", "likeRateeAvgW", "decRateeAvgW", "combRateeAvgW"))
merged["combRateeAvgW"] = rowSums(merged[c("attrRateeAvgW", "likeRateeAvgW")]
niceCors(merged, c("decRatingW"), c("attrRateeAvgW", "likeRateeAvgW", "decRateeAvgW", "combRateeAvgW"))
merged["combRateeAvgW"] = rowSums(merged[c("attrRateeAvgW", "likeRateeAvgW")])
niceCors(merged, c("decRatingW"), c("attrRateeAvgW", "likeRateeAvgW", "decRateeAvgW", "combRateeAvgW"))
merged[["normedDecRateeAvgW"]] = (merged[["decRateeAvgW"]] - mean(merged[["decRateeAvgW"]]))/sd(merged[["decRateeAvgW"]])
merged["combRateeAvgW"] = rowSums(merged[c("normedDecRateeAvgW", "attrRateeAvgW", "likeRateeAvgW")])
niceCors(merged, c("decRatingW"), c("attrRateeAvgW", "likeRateeAvgW", "decRateeAvgW", "combRateeAvgW"))
niceCors(merged, c("decRatingW"), c("attrRateeAvgW", "likeRateeAvgW", "decRateeAvgW", "normedDecRateeAvgW", "combRateeAvgW"))
merged[["normedDecRatingGuessW"]] = (merged[["decRatingGuessW"]] - mean(merged[["decRatingGuessW"]]))/sd(merged[["decRatingGuessW"]])
merged[["normedDecRaterAvgW"]] = (merged[["decRaterAvgW"]] - mean(merged[["decRaterAvgW"]]))/sd(merged[["decRaterAvgW"]])
merged["combRateeAvgW"] = rowSums(merged[c("normedDecRateeAvgW", "attrRateeAvgW")])
niceCors(merged, c("decRatingW"), c("attrRateeAvgW", "likeRateeAvgW", "decRateeAvgW", "normedDecRateeAvgW", "combRateeAvgW"))
merged["combRateeAvgW"] = rowSums(merged[c("normedDecRateeAvgW", "likeRateeAvgW")])
niceCors(merged, c("decRatingW"), c("attrRateeAvgW", "likeRateeAvgW", "decRateeAvgW", "normedDecRateeAvgW", "combRateeAvgW"))
merged["combRateeAvgW"] = rowSums(merged[c("normedDecRateeAvgW", "attrRateeAvgW", "likeRateeAvgW")])
niceCors(merged, c("decRatingW"), c("attrRateeAvgW", "likeRateeAvgW", "decRateeAvgW", "normedDecRateeAvgW", "combRateeAvgW"))
niceCors(merged, c("decRatingW"), c("attrRaterAvgW", "likeRaterAvgW", "decRaterAvgW", "normedDecRaterAvgW", "combRaterAvgW"))
niceCors(merged, c("decRatingW"), c("attrRaterAvgW", "likeRaterAvgW", "decRaterAvgW", "normedDecRaterAvgW"))
niceCors(merged, c("decRatingW"), c("attrRaterAvgW", "likeRaterAvgW", "decRaterAvgW", "decRatingGuess", "normedDecRaterAvgW"))
niceCors(merged, c("decRatingW"), c("attrRaterAvgW", "likeRaterAvgW", "decRaterAvgW", "decRatingGuessW", "normedDecRaterAvgW"))
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW") , c("decRateeAvgW",
"attrRateeAvgW",
"likeRateeAvgW",
"funRateeAvgW",
"combRateeAvgW")))
}
niceCors(merged, c("decRatingM"), c("attrRaterAvgM", "likeRaterAvgM", "decRaterAvgM", "decRatingGuessM"))
niceCors(merged, c("decRatingM"), c("attrRateeAvgM", "likeRateeAvgM", "decRateeAvgM", "decRatingGuessM"))
for(w in waves){
print(niceCors(merged, c("decRatingM"), c("attrRateeAvgM", "likeRateeAvgM", "decRateeAvgM")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingM"), c("attrRateeAvgM", "likeRateeAvgM", "decRateeAvgM")))
}
merged[["normedDecRateeAvgM"]] = (merged[["decRateeAvgM"]] - mean(merged[["decRateeAvgM"]]))/sd(merged[["decRateeAvgM"]])
merged["combRateeAvgM"] = rowSums(merged[c("normedDecRateeAvgM", "attrRateeAvgM", "likeRateeAvgM")])
niceCors(merged, c("decRatingM"), c("attrRateeAvgM", "likeRateeAvgM", "decRateeAvgM", "combRateeAvgM"))
niceCors(merged, c("decRatingW"), c("attrRaterAvgAdjW", "likeRaterAvgW", "decRaterAvgW", "decRatingGuessW", "normedDecRaterAvgW"))
niceCors(merged, c("decRatingM"), c("attrRateeAvgM", "likeRateeAvgM", "decRateeAvgM", "combRateeAvgM"))
niceCors(merged, c("decRatingW"), c("attrRateeAvgW", "likeRateeAvgW", "decRateeAvgW", "combRateeAvgW"))
niceCors(merged, c("decRatingW"), c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW", "combRateeAvgW"))
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW"), c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW")))
}
print(niceCors(merged[merged["wave"] %in% waves ,], c("decRatingW"), c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW")))
print(niceCors(merged[merged[["wave"]] %in% waves ,], c("decRatingW"), c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW")))
print(niceCors(merged[merged[["wave"]] %in% waves ,], c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM")))
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM")))
}
merged[["normedDecRateeAvgAdjM"]] = (merged[["decRateeAvgAdjM"]] - mean(merged[["decRateeAvgAdjM"]]))/sd(merged[["decRateeAvgM"]])
merged[["normedDecRaterAvgAdjW"]] = (merged[["decRaterAvgAdjW"]] - mean(merged[["decRaterAvgAdjW"]]))/sd(merged[["decRaterAvgAdjW"]])
merged[["normedDecRateeAvgAdjM"]] = (merged[["decRateeAvgAdjM"]] - mean(merged[["decRateeAvgAdjM"]]))/sd(merged[["decRateeAvgAdjM"]])
merged[["normedDecRateeAvgAdjW"]] = (merged[["decRateeAvgAdjW"]] - mean(merged[["decRateeAvgAdjW"]]))/sd(merged[["decRateeAvgAdjW"]])
merged["combRateeAvgW"] = rowSums(merged[c("normedDecRateeAvgAdjW", "attrRateeAvgAdjW", "likeRateeAvgAdjW")])
merged["combRateeAvgM"] = rowSums(merged[c("normedDecRateeAvgAdjM", "attrRateeAvgAdjM", "likeRateeAvgAdjM")])
merged["combRateeAvgAdjW"] = rowSums(merged[c("normedDecRateeAvgAdjW", "attrRateeAvgAdjW", "likeRateeAvgAdjW")])
merged["combRateeAvgAdjM"] = rowSums(merged[c("normedDecRateeAvgAdjM", "attrRateeAvgAdjM", "likeRateeAvgAdjM")])
niceCors(merged, c("decRatingW"), c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW", "combRateeAvgW"))
niceCors(merged, c("decRatingW"), c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW", "combRateeAvgAdjW"))
niceCors(merged, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "combRateeAvgAdjM"))
niceCors(merged, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgM", "combRateeAvgAdjM"))
niceCors(merged, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "combRateeAvgAdjM"))
niceCors(merged, c("decRatingW"), c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW", "combRateeAvgAdjW"))
niceCors(merged, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "combRateeAvgAdjM"))
niceCors(merged, c("decRatingM"), c("attrRateeAvgM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "combRateeAvgAdjM"))
niceCors(merged, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "combRateeAvgAdjM"))
niceCors(merged, c("decRatingW"), c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW", "combRateeAvgAdjW"))
print(niceCors(merged[merged[["wave"]] %in% waves ,], c("decRatingW"), c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "combRateeAvgAdjW")))
print(niceCors(merged[merged[["wave"]] %in% waves ,], c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "combRateeAvgAdjM")))
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "combRateeAvgAdjM")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW"), c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW", "combRateeAvgAdjM")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW"), c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW", "combRateeAvgAdjW")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW"), c("likeRatingGuessW", "attrRatingGuessW", "funRatingGuessW")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW"), c("likeRatingGuessW", "attrRatingGuessW", "funRatingGuessW")))
print(niceCors(merged[merged["wave"] == w,], c("decRatingW"), c("likeRateeAvgW", "attrRateeAvgW", "funRateeAvgW")))
}
slice = merged[merged["wave"] == 4,]
scale(slice[c("attrRatingGuess", "likeRatingGuess", "funRatingGuess")])
scale(slice[c("attrRatingGuessW", "likeRatingGuessW", "funRatingGuessW")])
slice["attrRatingGuess"]
slice["attrRatingGuessW"]
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingW"), c("likeRatingGuessW", "attrRatingGuessW", "funRatingGuessW")))
#   print(niceCors(merged[merged["wave"] == w,], c("decRatingW"), c("likeRateeAvgW", "attrRateeAvgW", "funRateeAvgW")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingM"), c("likeRatingGuessM", "attrRatingGuessM", "funRatingGuessM")))
#   print(niceCors(merged[merged["wave"] == w,], c("decRatingW"), c("likeRateeAvgW", "attrRateeAvgW", "funRateeAvgW")))
}
for(w in waves){
#   print(niceCors(merged[merged["wave"] == w,], c("decRatingM"), c("likeRatingGuessM", "attrRatingGuessM", "funRatingGuessM")))
print(niceCors(merged[merged["wave"] == w,], c("decRatingW"), c("likeRateeAvgW", "attrRateeAvgW", "funRateeAvgW", "attrRatingGuessW")))
}
for(w in waves){
#   print(niceCors(merged[merged["wave"] == w,], c("decRatingM"), c("likeRatingGuessM", "attrRatingGuessM", "funRatingGuessM")))
print(niceCors(merged[merged["wave"] == w,], c("decRatingW"), c("likeRateeAvgAdjW", "attrRateeAvgAdjW", "funRateeAvgAdjW", "attrRatingGuessW")))
}
names(merged)
niceCors(merged, c("decRatingW"), c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW", "combRateeAvgAdjW"))
niceCors(merged, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "combRateeAvgAdjM"))
n = names(merged)
n
n[grep("WaveAvg")]
n[grep("WaveAvg", n)]
n = names(merged)
slice = slice(!(n %in% bads))
slice = merged
bads = c(n[grep("WaveAvg", n)])
slice = slice(!(n %in% bads))
slice = slice[!(n %in% bads)]
names(slice)
bads = c(n[grep("WaveAvg|RaterAvgAdjHighW|RaterAvgAdjAbsDiff|RaterAvgAbsDiff|RaterAvgHighW", n)])
bads
slice = slice[!(n %in% bads)]
slice = merged
slice = slice[!(n %in% bads)]
names(slice)
source("libraries.R")
source("machineLearning2.R")
merged = read.csv('~/Desktop/speedDating/ratingMetricsAdded.csv')
#
source("libraries.R")
source("machineLearning2.R")
merged = read.csv('~/Desktop/speedDating/ratingMetricsAdded.csv')
#
names(merged)
bads = c(n[grep("Diff", n)])
n = names(merged)
bads = c(n[grep("Diff", n)])
merged[!(n %in% bads)]
newMerged = merged[!(n %in% bads)]
names(newMerged)
n[grep("inter",n)]
newMerged["decRatingGuessM"]
mean(newMerged[["decRatingGuessM"]])
probsToLORs(newMerged[["decRatingGuessM"]])
LORsToProbs(newMerged[["decRatingGuessM"]])
table(round(10*LORsToProbs(newMerged[["decRatingGuessM"]])))
n[grep("Inter"),n]
n[grep("Inter",n)]
merged["interDecM"] = 0.5*(merged["decRaterAvgM"] + merged["decRateeAvgM"])
niceCors(merged, c("decRatingM"), c("decRaterAvgM", "decRateeAvgM", "interDecM"))
niceCors(merged, c("decRatingM"), c("decRaterAvgM", "decRateeAvgM", "decRatingGuessM",  "interDecM"))
waves = unique(merged[["wave"]])
niceCors(merged, c("decRatingM"), c("decRaterAvgM", "decRateeAvgM", "decRatingGuessM",  "interDecM"))
for(w in waves){
print(niceCors(merged, c("decRatingM"), c("decRaterAvgM", "decRateeAvgM",  "interDecM", "decRatingGuessM")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == wave,], c("decRatingM"), c("decRaterAvgM", "decRateeAvgM",  "interDecM", "decRatingGuessM")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingM"), c("decRaterAvgM", "decRateeAvgM",  "interDecM", "decRatingGuessM")))
}
niceCors(merged, c("decRatingM"), c("decRaterAvgM", "decRateeAvgM", "decRatingGuessM",  "interDecM"))
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingM"), c("decRaterAvgM", "decRateeAdjAvgM",  "interDecM", "decRatingGuessM")))
}
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingM"), c("decRaterAvgM", "decRateeAvgAdjM",  "interDecM", "decRatingGuessM")))
}
merged["decRateeAvgAdjM"]
newMerged[c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM")]
newMerged["decRateeAvgM"]
newMerged["decRateeAvgAdjM"]
scale(newMerged["decRateeAvgAdjM"])
newMerged[c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM")]
source("libraries.R")
source("machineLearning2.R")
merged = read.csv('~/Desktop/speedDating/ratingMetricsAdded.csv')
n = names(merged)
names(merged)
merged["decWaveAvg"]
merged["decWaveAvgM"]
LORsToProbs(merged[["decWaveAvgM"]])
merged[c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM")] = scale(merged[c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM")])
merged[c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW")] = scale(merged[c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW")])
for(w in waves){
print(niceCors(merged[merged["wave"] == w,], c("decRatingM"), c("decRaterAvgM", "decRateeAvgAdjM",  "interDecM", "decRatingGuessM")))
}
merged["combRateeAvgAdjM"] = rowSums(merged[c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM")])
merged["combRateeAvgAdjW"] = rowSums(merged[c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW")])
merged[("combRateeAvgAdjM", "combRateeAvgAdjW")] = scale(merged[("combRateeAvgAdjM", "combRateeAvgAdjW")])
merged[c("combRateeAvgAdjM", "combRateeAvgAdjW")] = scale(merged[c("combRateeAvgAdjM", "combRateeAvgAdjW")])
names(merged)
merged[c("combRateeAvgAdjM", "combRateeAvgAdjW", "decRaterAvgAdjM", "decRaterAvgAdjW")] = scale(merged[c("combRateeAvgAdjM", "combRateeAvgAdjW", "decRaterAvgAdjM", "decRaterAvgAdjW")])
niceCors(merged, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM"))
niceCors(merged, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "attrRateeAvgAdjM"))
niceCors(merged, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "combRateeAvgAdjM"))
merged["interDecM"] = merged["combRateeAvgAdjM"] + merged["decRaterAvgAdjM"]
niceCors(merged, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "decRaterAvgAdjM", "combRateeAvgAdjM", "decRatingGuessM"))
niceCors(merged, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "decRaterAvgAdjM", "combRateeAvgAdjM", "interDecM", "decRatingGuessM"))
merged["oldInterDecM"] = merged["decRaterAvgAdjM"] + merged["decRateeAvgAdjM"]
niceCors(merged, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "decRaterAvgAdjM", "combRateeAvgAdjM", "interDecM", "decRatingGuessM", "oldInterDecM"))
for(wave in waves){
slice = merged[merged["wave"] == wave,]
print(niceCors(slice, c("decRatingM"), c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "decRateeAvgAdjM", "decRaterAvgAdjM", "combRateeAvgAdjM", "interDecM", "decRatingGuessM", "oldInterDecM")))
}
mAgged = aggregate(merged, by=merged["iidM"], FUN=mean)
mAgged
niceCors(mAgged, c("decRatingW"),  c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW" ))
niceCors(mAgged, c("decRateeAvgAdjW"),  c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "decRateeAvgAdjW" ))
mAgged["combo"] = mAgged["attrRateeAvgAdjW"] + mAgged["likeRateeAvgAdjW"]
niceCors(mAgged, c("decRateeAvgAdjW"),  c("attrRateeAvgAdjW", "likeRateeAvgAdjW", "combo", "decRateeAvgAdjW" ))
wAgged = aggregate(merged, by=merged["iidW"], FUN=mean)
wAgged["combo"] = mAgged["attrRateeAvgAdjM"] + mAgged["likeRateeAvgAdjM"]
wAgged["combo"] = wAgged["attrRateeAvgAdjM"] + wAgged["likeRateeAvgAdjM"]
niceCors(wAgged, c("decRateeAvgAdjM"),  c("attrRateeAvgAdjM", "likeRateeAvgAdjM", "combo", "decRateeAvgAdjM" ))
source("libraries.R")
source("machineLearning2.R")
merged = read.csv('~/Desktop/speedDating/ratingMetricsAdded.csv')
source("libraries.R")
source("machineLearning2.R")
merged = read.csv('~/Desktop/speedDating/ratingMetricsAdded.csv')
slice = merged[c("iidM", "iidW", "attrRatingM", "likeRatingM", "decRatingM", "funRatingM", "attrRatingW", "likeRatingW", "decRatingW", "funRatingW"
"decRaterAvgAdjW", "decRaterAvgAdjM", "decRateeAvgAdjW", "attrRateeAvgAdjW", "attrRateeAvgAdjM", "likeRateeAvgAdjM", "likeRateeAvgAdjW",
"funRateeAvgAdjM", "funRateeAvgAdjW", "match")]
slice = merged[c("iidM", "iidW", "attrRatingM", "likeRatingM", "decRatingM", "funRatingM", "attrRatingW", "likeRatingW", "decRatingW", "funRatingW",
"decRaterAvgAdjW", "decRaterAvgAdjM", "decRateeAvgAdjW", "attrRateeAvgAdjW", "attrRateeAvgAdjM", "likeRateeAvgAdjM", "likeRateeAvgAdjW",
"funRateeAvgAdjM", "funRateeAvgAdjW", "match")]
slice = merged[c("iidM", "iidW", "attrRatingM", "likeRatingM", "decRatingM", "funRatingM", "attrRatingW", "likeRatingW", "decRatingW", "funRatingW",
"decRaterAvgAdjW", "decRaterAvgAdjM", "decRateeAvgAdjW", "attrRateeAvgAdjW", "attrRateeAvgAdjM", "likeRateeAvgAdjM", "likeRateeAvgAdjW",
"funRateeAvgAdjM", "funRateeAvgAdjW", "match", "wave", "orderW", "orderM", "roundW", "roundM")]
names(slice)
waves = unique(merged[["wave"]])
n
n = names(slice)
origRatings = n[grep("RatingM|RatingW",n)]
origRatings
slice[c("decM", "decW")] = slice[c("decRatingM", "decRatingW")]
waves = unique(merged[["wave"]])
n = names(slice)
origRatings = n[grep("RatingM|RatingW",n)]
slice[c("decM", "decW")] = slice[c("decRatingM", "decRatingW")]
for(w in waves){
newSlice = slice[slice["wave"] == w,]
newSlice[origRatings] = scale(newSlice[origRatings])
slice[slice["wave"] == w,][[origRatings]] = newSlice[[origRatings]]
}
for(w in waves){
newSlice = slice[slice["wave"] == w,]
newSlice[origRatings] = scale(newSlice[origRatings])
slice[slice["wave"] == w,origRatings] = newSlice[[origRatings]]
}
for(w in waves){
newSlice = slice[slice["wave"] == w,]
newSlice[origRatings] = scale(newSlice[origRatings])
for(r in origRatings){
slice[slice["wave"] == w,][[r]] = newSlice[[r]]
}
}
mAgged = aggregate(slice, by=slice["iidM"], FUN=mean)
wAgged = aggregate(slice, by=slice["iidW"], FUN=mean)
mRatings = origRatings[grep("M$", origRatings)]
wRatings = origRatings[grep("W$", origRatings)]
niceCors(mAgged, mRatings, mRatings)
niceCors(mAgged, wRatings, wRatings)
idxs = sample(1:nrow(mAgged), floor(nrow(mAgged)/2))
train = mAgged[idxs,]
test = mAgged[-idxs,]
nrow(train)
nrow(test)
help(lm)
linM = lm(decRatingW ~ attrRatingW + likeRatingW, train)
predict(linM, decRatingW)
predict(linM, test)
test["predictions"] =  predict(linM, test)
niceCors(test, c("decRatingW"), c("predictions"))
linM = lm(decRatingW ~ attrRatingW + likeRatingW, test)
train["predictions"] =  predict(linM, train)
niceCors(train, c("decRatingW"), c("predictions"))
linM = lm(decRatingW ~ attrRatingW + likeRatingW + funRatingW, test)
train["predictions"] =  predict(linM, train)
niceCors(train, c("decRatingW"), c("predictions"))
linM = lm(decRatingW ~ attrRatingW, test)
train["predictions"] =  predict(linM, train)
niceCors(train, c("decRatingW"), c("predictions"))
linM = lm(decRatingW ~ attrRatingW + likeRatingW + funRatingW, test)
train["predictions"] =  predict(linM, train)
niceCors(train, c("decRatingW"), c("predictions"))
linM = lm(attrRatingW  ~ decRatingW + likeRatingW, test)
train["predictions"] =  predict(linM, train)
niceCors(train, c("decRatingW"), c("predictions"))
niceCors(train, c("attrRatingW"), c("predictions"))
niceCors(wAgged, mRatings, mRatings)
idxs = sample(1:nrow(wAgged), floor(nrow(wAgged)/2))
train = wAgged[idxs,]
test = wAgged[-idxs,]
linM = lm(decRatingM ~ attrRatingM + likeRatingM, train)
test["predictions"] =  predict(linM, test)
niceCors(test, c("decRatingW"), c("predictions"))
niceCors(test, c("decRatingM"), c("predictions"))
