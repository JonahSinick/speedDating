Make decisions 1 or -1.

Now, to get weights:

For a given item: look at all decisions on item
Yes weight: log(num raters) / log(num yes votes)
No weight: log(num raters) / log(num no votes)

Weight decisions by these

Now for each user, subtract off mean excluding item from item

Now for each rater Rater
For each decider Decider:
Now for each ratee Ratee:

Find correlation between modified decisions of Rater and Decider excluding Ratee

Multiply this by rater's original' rating of ratee




Users rate ratees
Let u1 be a user of interest
Let i1 be the item of interest
want to predict whether u1 will say yes to i1

u1 decision sum = sum of decisions of u1 on i's
u1 adjusted decision sum = sum of decisions of u1 on all i's except for  i1
u adjusted decision count = number of u decisions minus 1
u1 newDecs = u1 decisions - (u1 adjusted sum / u1 adjusted count)

Similarly get u2 newDecs




Now, for u1 and u2, what do we do?

Want to decide on i1

Look at all i's except for i1:

Weight to give to u1's rating of i_j:
If u1 said yes:
log(sum: said yes) - log(sum: said no)
-log(sum of )
log(total_num/num_who_say_yes_to_i_j)
If u1 said no:
log(total_num/num_who_say_no_to_i_j)


This gives adjusted ratings

        decX 1 decX 2 decX 3 decX 4 decX 5 decX 6 decX 7 decX 8 decX 9 decX 10 decX 11 decX 12 decX 13 decX 14 decX 15 decX 16 decX 17 decX 19 decX 20
decX 1     1.0   -0.3    0.4   -0.1     NA     NA   -0.1   -0.2   -0.4     0.2     0.2      NA    -0.3     0.4     0.0     0.3     0.0     0.2     0.0
decX 2    -0.3    1.0    0.1    0.4     NA     NA    0.4    0.2    0.8     0.4     0.4      NA    -0.1     0.0     0.4    -0.1     0.5     0.4    -0.1
decX 3     0.4    0.1    1.0    0.0     NA     NA    0.4   -0.2   -0.1     0.0     0.0      NA     0.1     0.4     0.2    -0.2    -0.1     0.0     0.0
decX 4    -0.1    0.4    0.0    1.0     NA     NA    0.4    0.8    0.3     0.2    -0.2      NA    -0.3     0.4     0.4     0.3     0.3    -0.2     0.0
decX 5      NA     NA     NA     NA     NA     NA     NA     NA     NA      NA      NA      NA      NA      NA      NA      NA      NA      NA      NA
decX 6      NA     NA     NA     NA     NA     NA     NA     NA     NA      NA      NA      NA      NA      NA      NA      NA      NA      NA      NA
decX 7    -0.1    0.4    0.4    0.4     NA     NA    1.0    0.3    0.3     0.2     0.2      NA     0.2     0.4     0.4    -0.2     0.3     0.2     0.0
decX 8    -0.2    0.2   -0.2    0.8     NA     NA    0.3    1.0    0.4     0.1    -0.3      NA    -0.3     0.3     0.5     0.6     0.4    -0.3    -0.2
decX 9    -0.4    0.8   -0.1    0.3     NA     NA    0.3    0.4    1.0     0.2     0.2      NA     0.1     0.0     0.4     0.1     0.7     0.2    -0.1
decX 10    0.2    0.4    0.0    0.2     NA     NA    0.2    0.1    0.2     1.0     0.7      NA    -0.1     0.2     0.3     0.5     0.2     0.7     0.0
decX 11    0.2    0.4    0.0   -0.2     NA     NA    0.2   -0.3    0.2     0.7     1.0      NA     0.2     0.2     0.3     0.1     0.2     1.0     0.0
decX 12     NA     NA     NA     NA     NA     NA     NA     NA     NA      NA      NA      NA      NA      NA      NA      NA      NA      NA      NA
decX 13   -0.3   -0.1    0.1   -0.3     NA     NA    0.2   -0.3    0.1    -0.1     0.2      NA     1.0    -0.3     0.1    -0.3     0.1     0.2     0.7
decX 14    0.4    0.0    0.4    0.4     NA     NA    0.4    0.3    0.0     0.2     0.2      NA    -0.3     1.0     0.4     0.3     0.0     0.2    -0.4
decX 15    0.0    0.4    0.2    0.4     NA     NA    0.4    0.5    0.4     0.3     0.3      NA     0.1     0.4     1.0     0.5     0.1     0.3     0.0
decX 16    0.3   -0.1   -0.2    0.3     NA     NA   -0.2    0.6    0.1     0.5     0.1      NA    -0.3     0.3     0.5     1.0     0.1     0.1    -0.2
decX 17    0.0    0.5   -0.1    0.3     NA     NA    0.3    0.4    0.7     0.2     0.2      NA     0.1     0.0     0.1     0.1     1.0     0.2     0.1
decX 19    0.2    0.4    0.0   -0.2     NA     NA    0.2   -0.3    0.2     0.7     1.0      NA     0.2     0.2     0.3     0.1     0.2     1.0     0.0
decX 20    0.0   -0.1    0.0    0.0     NA     NA    0.0   -0.2   -0.1     0.0     0.0      NA     0.7    -0.4     0.0    -0.2     0.1     0.0     1.0


        rateeDecAvg.x
decX 1      0.1163852
decX 2      0.6327125
decX 3      0.2743344
decX 4      0.4775322
decX 5             NA
decX 6             NA
decX 7      0.5960335
decX 8      0.4061160
decX 9      0.5936823
decX 10     0.6346257
decX 11     0.5872173
decX 12            NA
decX 13     0.2116302
decX 14     0.4154600
decX 15     0.7072976
decX 16     0.3535212
decX 17     0.5936823
decX 19     0.5872173
decX 20     0.1586288


        RaterX.1 RaterX.2 RaterX.3 RaterX.4 RaterX.5 RaterX.6 RaterX.7 RaterX.8 RaterX.9 RaterX.10 RaterX.11 RaterX.12 RaterX.13 RaterX.14 RaterX.15 RaterX.16 RaterX.17
decX.1       0.9     -0.3      0.3     -0.1       NA       NA     -0.1     -0.2     -0.4       0.2       0.2        NA      -0.2       0.4       0.0       0.2      -0.1
decX.2      -0.3      0.9      0.0      0.4       NA       NA      0.4      0.1      0.7       0.3       0.3        NA      -0.1       0.0       0.3      -0.1       0.4
decX.3       0.3      0.1      0.9      0.0       NA       NA      0.3     -0.2     -0.1       0.0       0.0        NA       0.1       0.3       0.2      -0.2      -0.2
decX.4      -0.1      0.3      0.0      0.9       NA       NA      0.4      0.6      0.3       0.2      -0.2        NA      -0.2       0.4       0.3       0.2       0.3
decX.5        NA       NA       NA       NA       NA       NA       NA       NA       NA        NA        NA        NA        NA        NA        NA        NA        NA
decX.6        NA       NA       NA       NA       NA       NA       NA       NA       NA        NA        NA        NA        NA        NA        NA        NA        NA
decX.7      -0.1      0.3      0.3      0.4       NA       NA      0.9      0.2      0.3       0.2       0.2        NA       0.1       0.4       0.3      -0.2       0.3
decX.8      -0.2      0.2     -0.2      0.7       NA       NA      0.3      0.9      0.4       0.1      -0.3        NA      -0.3       0.3       0.4       0.5       0.4
decX.9      -0.4      0.7     -0.2      0.3       NA       NA      0.3      0.4      0.9       0.2       0.2        NA       0.0      -0.1       0.3       0.1       0.7
decX.10      0.1      0.3     -0.1      0.2       NA       NA      0.2      0.1      0.2       0.9       0.6        NA      -0.1       0.2       0.2       0.4       0.2
decX.11      0.1      0.3     -0.1     -0.2       NA       NA      0.2     -0.2      0.2       0.6       0.9        NA       0.1       0.2       0.2       0.1       0.2
decX.12       NA       NA       NA       NA       NA       NA       NA       NA       NA        NA        NA        NA        NA        NA        NA        NA        NA
decX.13     -0.2     -0.1      0.1     -0.2       NA       NA      0.1     -0.3      0.0      -0.1       0.2        NA       0.9      -0.2       0.1      -0.3       0.0
decX.14      0.3      0.0      0.3      0.4       NA       NA      0.4      0.2     -0.1       0.2       0.2        NA      -0.2       0.9       0.3       0.2      -0.1
decX.15     -0.1      0.3      0.1      0.3       NA       NA      0.3      0.4      0.3       0.2       0.2        NA       0.0       0.3       0.9       0.4       0.1
decX.16      0.2     -0.1     -0.2      0.3       NA       NA     -0.2      0.6      0.1       0.4       0.1        NA      -0.3       0.3       0.4       0.9       0.1
decX.17      0.0      0.4     -0.2      0.3       NA       NA      0.3      0.4      0.6       0.2       0.2        NA       0.0      -0.1       0.1       0.1       0.9
decX.19      0.1      0.3     -0.1     -0.2       NA       NA      0.2     -0.2      0.2       0.6       0.9        NA       0.1       0.2       0.2       0.1       0.2
decX.20      0.1     -0.1      0.0      0.0       NA       NA      0.0     -0.2     -0.1       0.0       0.0        NA       0.6      -0.3       0.0      -0.2       0.1
        RaterX.19 RaterX.20
decX.1        0.2      -0.1
decX.2        0.3      -0.2
decX.3        0.0      -0.1
decX.4       -0.2      -0.1
decX.5         NA        NA
decX.6         NA        NA
decX.7        0.2      -0.1
decX.8       -0.3      -0.1
decX.9        0.2      -0.2
decX.10       0.6      -0.1
decX.11       0.9      -0.1
decX.12        NA        NA
decX.13       0.2       0.2
decX.14       0.2      -0.2
decX.15       0.2      -0.2
decX.16       0.1      -0.2
decX.17       0.2      -0.1
decX.19       0.9      -0.1
decX.20       0.0       0.4




# library(gdata)
# library(ggplot2)
# library(miscTools)
# library(xlsx)
# library(hash)
# library(aod)
# library(randomForest)
# library(LiblineaR)
# library(Matrix)
# library(plyr)
# library(recommenderlab)
# library(scatterplot3d)
#
# df <- read.csv('~/Desktop/speedDatingData.csv')
# f=function(x){
#   x<-as.numeric(as.character(x)) #first convert each column into numeric if it is from factor
#   x[is.na(x)] =median(x, na.rm=TRUE) #convert the item with NA to median value from the column
#   x #display the column
# }
# keeps = c("wave", "gender", "iid", "pid", "id", "partner",  "dec", "match")
# df = df[keeps]
# keeps_to_fix = c("dec", "match")
#
# df_rm_na = df[keeps_to_fix]
# df_rm_na = data.frame(apply(df_rm_na,2,f))
# df[keeps_to_fix] = df_rm_na[keeps_to_fix]
# df = na.omit(df)
# men = df[df["gender"] == 1,]
# women = df[df["gender"] == 0,]
# own_id_info = c("iid", "pid", "match", "wave")
# partner_id_info = c("pid", "iid", "match", "wave")
# merged = merge(women, men, by.x = own_id_info, by.y = partner_id_info)
# oddsRatio = function(p){
#   return(p/(1 - p))
# }
#
#
# inverseOddsRatio = function(or){
#   return(or/(1 + or))
# }
#
#
#
#
#
#
#
#
#
#
#
#
# for(i in 1:20){
#   print(i)
#   wave = merged[merged["wave"] == i,]
#
#
#   len = length(unique(wave[["id.x"]]))
#   len2 = length(unique(wave[["id.y"]]))
#   x_ids = unique(wave[["id.x"]])
#   y_ids = unique(wave[["id.y"]])
#   for(j in x_ids){
#     slice_j = wave[wave["id.x"] == j,]
#     wave[paste("yesAnswerX",toString(j),sep="_")] = slice_j[["dec.x"]]
#     wave[paste("noAnswerX",toString(j),sep="_")] = 1 - slice_j[["dec.x"]]
#     wave[paste("prob",toString(j),sep="_")] = 0
#     wave[paste("betterProb",toString(j),sep="_")] = 0
#     wave[paste("raterCor",toString(j),sep="_")] = 0
#     wave[paste("raterCorSq",toString(j),sep="_")] = 0
#   }
#   for(j in x_ids){
#     slice_j = wave[wave["id.x"] == j,]
#     for(k in x_ids){
#       if(j !=k ){
#         slice_k = wave[wave["id.x"] == k,]
#         for(p in y_ids){
#           c =  cor(slice_k[slice_k["id.y"] != p,][[paste("yesAnswerX",toString(j),sep="_")]], slice_k[slice_k["id.y"] != p,][[paste("yesAnswerX",toString(k),sep="_")]])
#           c = ifelse(is.na(c), 0.01, c)
#           num = ifelse(c >= 0, c*c, -c*c)
#           wave[wave["id.x"] == k,][paste("raterCor",toString(j),sep="_")] = c*ifelse(slice_j[[paste("yesAnswerX",toString(j),sep="_")]] == 1, 1, -1)
#           wave[wave["id.x"] == k,][paste("raterCorSq",toString(j),sep="_")] = (num)*ifelse(slice_j[[paste("yesAnswerX",toString(j),sep="_")]] == 1, 1, -1)
#         }
#       }
#     }
#   }
#   for(j in x_ids){
#     slice_j = wave[wave["id.x"] == j,]
#     for(k in x_ids){
#       if(k == j){
#         wave[wave["id.x"] == k,][[paste("prob",toString(j),sep="_")]] = 0.5
#         wave[wave["id.x"] == k,][[paste("betterProb",toString(j),sep="_")]] = 0.5
#       }
#       else{
#         slice_k = wave[wave["id.x"] == k,]
#         both_yes = slice_k[[paste("yesAnswerX",toString(k),sep="_")]]*slice_j[[paste("yesAnswerX",toString(j),sep="_")]]
#         both_no = slice_k[[paste("noAnswerX",toString(k),sep="_")]]*slice_j[[paste("noAnswerX",toString(j),sep="_")]]
#         other_yes = slice_k[[paste("noAnswerX",toString(k),sep="_")]]*slice_j[[paste("yesAnswerX",toString(j),sep="_")]]
#         other_no = slice_k[[paste("yesAnswerX",toString(k),sep="_")]]*slice_j[[paste("noAnswerX",toString(j),sep="_")]]
#         both_yes = sum(both_yes) - both_yes
#         both_no = sum(both_no) - both_no
#         other_no = sum(other_no) - other_no
#         other_yes = sum(other_yes) - other_yes
#         yes_sequence = ((both_yes + other_no)/(length(x_ids) - 1))
#         no_sequence = ((both_no + other_yes)/(length(x_ids) - 1))
#         agree_sequence = ((both_no + both_yes)/(length(x_ids) - 1))
#         disagree_sequence = ((other_no + other_yes)/(length(x_ids) - 1))
#
#         wave[wave["id.x"] == k,][[paste("prob",toString(j),sep="_")]] = c(ifelse(slice_j[paste("yesAnswerX",toString(j),sep="_")] == 1, yes_sequence, 1 - no_sequence))
#         wave[wave["id.x"] == k,][[paste("betterProb",toString(j),sep="_")]] = c(ifelse(slice_j[paste("yesAnswerX",toString(j),sep="_")] == 1, agree_sequence, 1 - agree_sequence))
#
#       }
#     }
#   }
#
#   wave = addProbs(wave)
#   write.csv(wave, paste("~/Desktop/waves/newestWave",paste(toString(i),".csv",sep=""),sep=""))
# }
#
# # ----------------------------------------------------
#
for(i in 1:20){
  wave = read.csv(paste("~/Desktop/waves/newestWave",paste(toString(i),".csv",sep=""),sep=""))

  print(i)
  len2 = length(unique(wave[["id.y"]]))
  y_ids = unique(wave[["id.y"]])
  for(j in y_ids){
    slice_j = wave[wave["id.y"] == j,]
    wave[paste("yesAnswerY",toString(j),sep="_")] = slice_j[["dec.y"]]
    wave[paste("noAnswerY",toString(j),sep="_")] = 1 - slice_j[["dec.y"]]
    wave[paste("probY",toString(j),sep="_")] = 0
    wave[paste("betterProbY",toString(j),sep="_")] = 0
    wave[paste("raterCorY",toString(j),sep="_")] = 0
    wave[paste("raterCorSqY",toString(j),sep="_")] = 0
  }
  for(j in y_ids){
    slice_j = wave[wave["id.y"] == j,]
    for(k in y_ids){
      if(j !=k ){
        slice_k = wave[wave["id.y"] == k,]
        for(p in y_ids){
          c =  cor(slice_k[slice_k["id.y"] != p,][[paste("yesAnswerY",toString(j),sep="_")]], slice_k[slice_k["id.y"] != p,][[paste("yesAnswerY",toString(k),sep="_")]])
          c = ifelse(is.na(c), 0.01, c)
          num = ifelse(c >= 0, c*c, -c*c)
          wave[wave["id.y"] == k,][paste("raterCorY",toString(j),sep="_")] = c*ifelse(slice_j[[paste("yesAnswerY",toString(j),sep="_")]] == 1, 1, -1)
          wave[wave["id.y"] == k,][paste("raterCorSqY",toString(j),sep="_")] = (num)*ifelse(slice_j[[paste("yesAnswerY",toString(j),sep="_")]] == 1, 1, -1)
        }
      }
    }
  }
  for(j in y_ids){
    slice_j = wave[wave["id.y"] == j,]
    for(k in y_ids){
      if(k == j){
        wave[wave["id.y"] == k,][[paste("probY",toString(j),sep="_")]] = 0.5
        wave[wave["id.y"] == k,][[paste("betterProbY",toString(j),sep="_")]] = 0.5
      }
      else{
        slice_k = wave[wave["id.y"] == k,]
        both_yes = slice_k[[paste("yesAnswerY",toString(k),sep="_")]]*slice_j[[paste("yesAnswerY",toString(j),sep="_")]]
        both_no = slice_k[[paste("noAnswerY",toString(k),sep="_")]]*slice_j[[paste("noAnswerY",toString(j),sep="_")]]
        other_yes = slice_k[[paste("noAnswerY",toString(k),sep="_")]]*slice_j[[paste("yesAnswerY",toString(j),sep="_")]]
        other_no = slice_k[[paste("yesAnswerY",toString(k),sep="_")]]*slice_j[[paste("noAnswerY",toString(j),sep="_")]]
        both_yes = sum(both_yes) - both_yes
        both_no = sum(both_no) - both_no
        other_no = sum(other_no) - other_no
        other_yes = sum(other_yes) - other_yes
        yes_sequence = ((both_yes + other_no)/(length(y_ids) - 1))
        no_sequence = ((both_no + other_yes)/(length(y_ids) - 1))
        agree_sequence = ((both_no + both_yes)/(length(y_ids) - 1))
        disagree_sequence = ((other_no + other_yes)/(length(y_ids) - 1))

        wave[wave["id.y"] == k,][[paste("probY",toString(j),sep="_")]] = c(ifelse(slice_j[paste("yesAnswerY",toString(j),sep="_")] == 1, yes_sequence, 1 - no_sequence))
        wave[wave["id.y"] == k,][[paste("betterProbY",toString(j),sep="_")]] = c(ifelse(slice_j[paste("yesAnswerY",toString(j),sep="_")] == 1, agree_sequence, 1 - agree_sequence))

      }
    }
  }
  write.csv(wave, paste("~/Desktop/waves/newestWave2",paste(toString(i),".csv",sep=""),sep=""))
}




addProbs = function(wave){
  n = names(wave)
  wave["decProb"] = 1
  wave["betterDecProb"] = 1
  probs = n[grep("prob.", n)]
  betterProbs = n[grep("betterProb.", n)]
  for(p in probs){
    wave[p] = ifelse(wave[[p]] == 1, 0.99,  wave[[p]])
    wave[p] = ifelse(wave[[p]] == 0, 0.01,  wave[[p]])
    wave["decProb"] = wave["decProb"]*oddsRatio(wave[p])
  }
  for(p in betterProbs){
    wave[p] = ifelse(wave[[p]] == 1, 0.99,  wave[[p]])
    wave[p] = ifelse(wave[[p]] == 0, 0.01,  wave[[p]])
    wave["betterDecProb"] = wave["betterDecProb"]*oddsRatio(wave[p])
  }
  wave["decProb"] = inverseOddsRatio(wave["decProb"]^(1/(length(probs))))
  wave["betterDecProb"] = inverseOddsRatio(wave["betterDecProb"]^(1/(length(betterProbs))))
  wave["guess"] = ifelse(wave["decProb"] > 0.5, 1, 0)
  wave["betterGuess"] = ifelse(wave["betterDecProb"] > 0.5, 1, 0)
  return(wave)
}