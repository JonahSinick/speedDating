
addProbs = function(wave){
  n = names(wave)
  wave["decProb"] = 1
  wave["betterDecProb"] = 1
  probs = n[grep("prob.", n)]
  betterProbs = n[grep("betterProb.", n)]
  for(p in probs){
    wave[p] = ifelse(wave[[p]] == 1, 0.99,  wave[[p]])
    wave[p] = ifelse(wave[[p]] == 0, 0.01,  wave[[p]])
    wave["decProb"] = wave["decProb"]*oddsRatio(wave[p])    
  }
  for(p in betterProbs){
    wave[p] = ifelse(wave[[p]] == 1, 0.99,  wave[[p]])
    wave[p] = ifelse(wave[[p]] == 0, 0.01,  wave[[p]])    
    wave["betterDecProb"] = wave["betterDecProb"]*oddsRatio(wave[p])
  }  
  wave["decProb"] = inverseOddsRatio(wave["decProb"]^(1/(length(probs))))
  wave["betterDecProb"] = inverseOddsRatio(wave["betterDecProb"]^(1/(length(betterProbs))))
  wave["guess"] = ifelse(wave["decProb"] > 0.5, 1, 0)
  wave["betterGuess"] = ifelse(wave["betterDecProb"] > 0.5, 1, 0)
  return(wave)
}


for(i in 1:20){
  print(i)
  wave = merged[merged["wave"] == i,]
  len = length(unique(wave[["id.x"]]))
  len2 = length(unique(wave[["id.y"]]))
  x_ids = unique(wave[["id.x"]])
  y_ids = unique(wave[["id.y"]])
  for(j in x_ids){
    slice_j = wave[wave["id.x"] == j,]
    wave[paste("yesAnswerX",toString(j),sep="_")] = slice_j[["dec.x"]]
    wave[paste("noAnswerX",toString(j),sep="_")] = 1 - slice_j[["dec.x"]]
    wave[paste("probX",toString(j),sep="_")] = 0
    wave[paste("betterProbX",toString(j),sep="_")] = 0
    
  }
  for(j in x_ids){
    slice_j = wave[wave["id.x"] == j,]
    for(k in x_ids){
      if(k == j){
        wave[wave["id.x"] == k,][[paste("probX",toString(j),sep="_")]] = 0.5
        wave[wave["id.x"] == k,][[paste("betterProbX",toString(j),sep="_")]] = 0.5
      }
      else{
        slice_k = wave[wave["id.x"] == k,]
        both_yes = slice_k[[paste("yesAnswerX",toString(k),sep="_")]]*slice_j[[paste("yesAnswerX",toString(j),sep="_")]]
        both_no = slice_k[[paste("noAnswerX",toString(k),sep="_")]]*slice_j[[paste("noAnswerX",toString(j),sep="_")]]
        other_yes = slice_k[[paste("noAnswerX",toString(k),sep="_")]]*slice_j[[paste("yesAnswerX",toString(j),sep="_")]]
        other_no = slice_k[[paste("yesAnswerX",toString(k),sep="_")]]*slice_j[[paste("noAnswerX",toString(j),sep="_")]]
        both_yes = sum(both_yes) - both_yes
        both_no = sum(both_no) - both_no
        other_no = sum(other_no) - other_no
        other_yes = sum(other_yes) - other_yes        
        yes_sequence = ((both_yes + other_no)/(length(x_ids) - 1))
        no_sequence = ((both_no + other_yes)/(length(x_ids) - 1))
        agree_sequence = ((both_no + both_yes)/(length(x_ids) - 1))
        wave[wave["id.x"] == k,][[paste("probX",toString(j),sep="_")]] = c(ifelse(slice_j[paste("yesAnswerX",toString(j),sep="_")] == 1, yes_sequence, 1 - no_sequence))
        wave[wave["id.x"] == k,][[paste("betterProbX",toString(j),sep="_")]] = c(ifelse(slice_j[paste("yesAnswerX",toString(j),sep="_")] == 1, agree_sequence, 1 - agree_sequence))
        
      }
    }
  }
  for(j in y_ids){
    slice_j = wave[wave["id.y"] == j,]
    for(k in y_ids){
      if(k == j){
        wave[wave["id.y"] == k,][[paste("probY",toString(j),sep="_")]] = 0.5
        wave[wave["id.y"] == k,][[paste("betterProbY",toString(j),sep="_")]] = 0.5
      }
      else{
        slice_k = wave[wave["id.y"] == k,]
        both_yes = slice_k[[paste("yesAnswerY",toString(k),sep="_")]]*slice_j[[paste("yesAnswerY",toString(j),sep="_")]]
        both_no = slice_k[[paste("noAnswerY",toString(k),sep="_")]]*slice_j[[paste("noAnswerY",toString(j),sep="_")]]
        other_yes = slice_k[[paste("noAnswerY",toString(k),sep="_")]]*slice_j[[paste("yesAnswerY",toString(j),sep="_")]]
        other_no = slice_k[[paste("yesAnswerY",toString(k),sep="_")]]*slice_j[[paste("noAnswerY",toString(j),sep="_")]]
        both_yes = sum(both_yes) - both_yes
        both_no = sum(both_no) - both_no
        other_no = sum(other_no) - other_no
        other_yes = sum(other_yes) - other_yes        
        yes_sequence = ((both_yes + other_no)/(length(y_ids) - 1))
        no_sequence = ((both_no + other_yes)/(length(y_ids) - 1))
        agree_sequence = ((both_no + both_yes)/(length(y_ids) - 1))
        wave[wave["id.y"] == k,][[paste("probY",toString(j),sep="_")]] = c(ifelse(slice_j[paste("yesAnswerY",toString(j),sep="_")] == 1, yes_sequence, 1 - no_sequence))
        wave[wave["id.y"] == k,][[paste("betterProbY",toString(j),sep="_")]] = c(ifelse(slice_j[paste("yesAnswerY",toString(j),sep="_")] == 1, agree_sequence, 1 - agree_sequence))
        
      }
    }
  }
	
  wave = addProbs(wave)
  write.csv(wave, paste("~/Desktop/waves/newestWave",paste(toString(i),".csv",sep=""),sep=""))    
}






addProbs = function(wave){
  n = names(wave)
  wave["decProbX"] = 1
  wave["betterDecProbX"] = 1
  probs = n[grep("prob.", n)]
  betterProbsX = n[grep("betterProbX.", n)]
  for(p in probs){
    wave[p] = ifelse(wave[[p]] == 1, 0.99,  wave[[p]])
    wave[p] = ifelse(wave[[p]] == 0, 0.01,  wave[[p]])
    wave["decProbX"] = wave["decProbX"]*oddsRatio(wave[p])    
  }
  for(p in betterProbXs){
    wave[p] = ifelse(wave[[p]] == 1, 0.99,  wave[[p]])
    wave[p] = ifelse(wave[[p]] == 0, 0.01,  wave[[p]])    
    wave["betterDecProbX"] = wave["betterDecProbX"]*oddsRatio(wave[p])
  }  
  wave["decProbX"] = inverseOddsRatio(wave["decProbX"]^(1/(length(probs))))
  wave["betterDecProbX"] = inverseOddsRatio(wave["betterDecProbX"]^(1/(length(betterProbsX))))
  wave["guess"] = ifelse(wave["decProbX"] > 0.5, 1, 0)
  wave["betterGuess"] = ifelse(wave["betterDecProbX"] > 0.5, 1, 0)
	
  wave["decProbY"] = 1
  wave["betterDecProbY"] = 1
  probs = n[grep("prob.", n)]
  betterProbsX = n[grep("betterProbY.", n)]
  for(p in probs){
    wave[p] = ifelse(wave[[p]] == 1, 0.99,  wave[[p]])
    wave[p] = ifelse(wave[[p]] == 0, 0.01,  wave[[p]])
    wave["decProbY"] = wave["decProbY"]*oddsRatio(wave[p])    
  }
  for(p in betterProbYs){
    wave[p] = ifelse(wave[[p]] == 1, 0.99,  wave[[p]])
    wave[p] = ifelse(wave[[p]] == 0, 0.01,  wave[[p]])    
    wave["betterDecProbY"] = wave["betterDecProbY"]*oddsRatio(wave[p])
  }  
  wave["decProbY"] = inverseOddsRatio(wave["decProbY"]^(1/(length(probs))))
  wave["betterDecProbY"] = inverseOddsRatio(wave["betterDecProbY"]^(1/(length(betterProbsX))))
  wave["guess"] = ifelse(wave["decProbY"] > 0.5, 1, 0)
  wave["betterGuess"] = ifelse(wave["betterDecProbY"] > 0.5, 1, 0)
	
	
  return(wave)
}